float mutationRate = 0.01;
int totalPopulation =150;

DNA[] population;
ArrayList<DNA> matingPool;
String target;

PFont f;
void setup() {
  size(600, 200);
  target="happiness is a butterfly";

  population = new DNA[totalPopulation];

  for (int i = 0; i< population.length; i++) {
    population[i] = new DNA(target.length());
  }
  f= createFont("Courier", 12, true);
}

void draw() {

  for (int i = 0; i< population.length; i++) {
    population[i].calcFitness(target);
  }

  ArrayList<DNA> matingPool = new ArrayList<DNA>();

  for (int i = 0; i< population.length; i++) {
    int nnnn = int(population[i].fitness*100);
    for (int j = 0; j<nnnn; j++) {
      matingPool.add(population[i]);
    }
  }

  for (int i= 0; i<population.length; i++);
  {
    int a = int(random(matingPool.size()));
    int b = int(random(matingPool.size()));
    DNA partnerA = matingPool.get(a);
    DNA partnerB = matingPool.get(b);

    DNA child = partnerA.crossover(partnerB);

    child.mutate(mutationRate);
    population[i] = chlid;
    
    
  }

  background(255);
  fill(0);
  String everything = "";
  for (int i = 0; i< population.length; i++) {
    everything +=population[i].getPhrase()+"";
  }
  textFont(f, 12);
  text(everything, 10, 10,width, height);
}
=============================================================================
class DNA {

  char[]genes;
  float fitness;

  DNA(int num) {
    genes = new char[num];
    for (int i = 0; i<genes.length; i++) {
      genes[i] = (char)random(32, 128);
    }
  }

  String getPhrase() {

    return new String(genes);
  }

  void calcFitness(String target) {
    int score = 0;
    for (int i = 0; i<genes.length; i++) {
      if (genes[i] == target.charAt(i)) {
        score++;
      }
    }
    fitness = (float)score/(float)target.length();
  }

  DNA crossover(DNA partner) {
    DNA child = new DNA(genes.length);
    int midpoint = int (random(genes.length));
    for (int i = 0; i< genes.length; i++) {
      if (i> midpoint)child.genes[i] = genes[i];
      else child.genes = partner.genes[i];
    }
    return child;
  }

  void mutate(float mutationRate) {
    for (int i = 0; i<genes.length; i++) {
      if (random(1)<mutationRate) {
        genes[i] = (char)random(32, 128);
      }
    }
  }
}
